%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
---
description: Learn how to create, manage, and use volumes instead of bind mounts for
  persisting data generated and used by Docker.
title: Volumes
keywords: docker compose volumes, docker volumes, docker compose volume, docker volume
  mount, docker mount volume, docker volume create, docker volume location
aliases:
- /userguide/dockervolumes/
- /engine/tutorials/dockervolumes/
- /engine/userguide/dockervolumes/
- /engine/admin/volumes/volumes/
---
@y
---
description: Learn how to create, manage, and use volumes instead of bind mounts for
  persisting data generated and used by Docker.
title: Volumes
keywords: docker compose volumes, docker volumes, docker compose volume, docker volume
  mount, docker mount volume, docker volume create, docker volume location
aliases:
- /userguide/dockervolumes/
- /engine/tutorials/dockervolumes/
- /engine/userguide/dockervolumes/
- /engine/admin/volumes/volumes/
---
@z

@x
Volumes are the preferred mechanism for persisting data generated by and used
by Docker containers. While [bind mounts](bind-mounts.md) are dependent on the
directory structure and OS of the host machine, volumes are completely managed by
Docker. Volumes have several advantages over bind mounts:
@y
Volumes are the preferred mechanism for persisting data generated by and used
by Docker containers. While [bind mounts](bind-mounts.md) are dependent on the
directory structure and OS of the host machine, volumes are completely managed by
Docker. Volumes have several advantages over bind mounts:
@z

@x
- Volumes are easier to back up or migrate than bind mounts.
- You can manage volumes using Docker CLI commands or the Docker API.
- Volumes work on both Linux and Windows containers.
- Volumes can be more safely shared among multiple containers.
- Volume drivers let you store volumes on remote hosts or cloud providers, encrypt the contents of volumes, or add other functionality.
- New volumes can have their content pre-populated by a container.
- Volumes on Docker Desktop have much higher performance than bind mounts from
  Mac and Windows hosts.
@y
- Volumes are easier to back up or migrate than bind mounts.
- You can manage volumes using Docker CLI commands or the Docker API.
- Volumes work on both Linux and Windows containers.
- Volumes can be more safely shared among multiple containers.
- Volume drivers let you store volumes on remote hosts or cloud providers, encrypt the contents of volumes, or add other functionality.
- New volumes can have their content pre-populated by a container.
- Volumes on Docker Desktop have much higher performance than bind mounts from
  Mac and Windows hosts.
@z

@x
In addition, volumes are often a better choice than persisting data in a
container's writable layer, because a volume doesn't increase the size of the
containers using it, and the volume's contents exist outside the lifecycle of a
given container.
@y
In addition, volumes are often a better choice than persisting data in a
container's writable layer, because a volume doesn't increase the size of the
containers using it, and the volume's contents exist outside the lifecycle of a
given container.
@z

@x
![Volumes on the Docker host](images/types-of-mounts-volume.webp?w=450&h=300)
@y
![Volumes on the Docker host](images/types-of-mounts-volume.webp?w=450&h=300)
@z

@x
If your container generates non-persistent state data, consider using a
[tmpfs mount](tmpfs.md) to avoid storing the data anywhere permanently, and to
increase the container's performance by avoiding writing into the container's
writable layer.
@y
If your container generates non-persistent state data, consider using a
[tmpfs mount](tmpfs.md) to avoid storing the data anywhere permanently, and to
increase the container's performance by avoiding writing into the container's
writable layer.
@z

@x
Volumes use `rprivate` bind propagation, and bind propagation isn't
configurable for volumes.
@y
Volumes use `rprivate` bind propagation, and bind propagation isn't
configurable for volumes.
@z

@x
## Choose the -v or --mount flag
@y
## Choose the -v or --mount flag
@z

@x
In general, `--mount` is more explicit and verbose. The biggest difference is that
the `-v` syntax combines all the options together in one field, while the `--mount`
syntax separates them. Here is a comparison of the syntax for each flag.
@y
In general, `--mount` is more explicit and verbose. The biggest difference is that
the `-v` syntax combines all the options together in one field, while the `--mount`
syntax separates them. Here is a comparison of the syntax for each flag.
@z

@x
If you need to specify volume driver options, you must use `--mount`.
@y
If you need to specify volume driver options, you must use `--mount`.
@z

@x
- `-v` or `--volume`: Consists of three fields, separated by colon characters
  (`:`). The fields must be in the correct order, and the meaning of each field
  isn't immediately obvious.
@y
- `-v` or `--volume`: Consists of three fields, separated by colon characters
  (`:`). The fields must be in the correct order, and the meaning of each field
  isn't immediately obvious.
@z

@x
  - In the case of named volumes, the first field is the name of the volume, and is
    unique on a given host machine. For anonymous volumes, the first field is
    omitted.
  - The second field is the path where the file or directory are mounted in
    the container.
  - The third field is optional, and is a comma-separated list of options, such
    as `ro`. These options are discussed below.
@y
  - In the case of named volumes, the first field is the name of the volume, and is
    unique on a given host machine. For anonymous volumes, the first field is
    omitted.
  - The second field is the path where the file or directory are mounted in
    the container.
  - The third field is optional, and is a comma-separated list of options, such
    as `ro`. These options are discussed below.
@z

@x
- `--mount`: Consists of multiple key-value pairs, separated by commas and each
  consisting of a `<key>=<value>` tuple. The `--mount` syntax is more verbose
  than `-v` or `--volume`, but the order of the keys isn't significant, and
  the value of the flag is easier to understand.
  - The `type` of the mount, which can be [`bind`](bind-mounts.md), `volume`, or
    [`tmpfs`](tmpfs.md). This topic discusses volumes, so the type is always
    `volume`.
  - The `source` of the mount. For named volumes, this is the name of the volume.
    For anonymous volumes, this field is omitted. Can be specified as `source`
    or `src`.
  - The `destination` takes as its value the path where the file or directory
    is mounted in the container. Can be specified as `destination`, `dst`,
    or `target`.
  - The `readonly` option, if present, causes the bind mount to be [mounted into
    the container as read-only](#use-a-read-only-volume). Can be specified as `readonly` or `ro`.
  - The `volume-opt` option, which can be specified more than once, takes a
    key-value pair consisting of the option name and its value.
@y
- `--mount`: Consists of multiple key-value pairs, separated by commas and each
  consisting of a `<key>=<value>` tuple. The `--mount` syntax is more verbose
  than `-v` or `--volume`, but the order of the keys isn't significant, and
  the value of the flag is easier to understand.
  - The `type` of the mount, which can be [`bind`](bind-mounts.md), `volume`, or
    [`tmpfs`](tmpfs.md). This topic discusses volumes, so the type is always
    `volume`.
  - The `source` of the mount. For named volumes, this is the name of the volume.
    For anonymous volumes, this field is omitted. Can be specified as `source`
    or `src`.
  - The `destination` takes as its value the path where the file or directory
    is mounted in the container. Can be specified as `destination`, `dst`,
    or `target`.
  - The `readonly` option, if present, causes the bind mount to be [mounted into
    the container as read-only](#use-a-read-only-volume). Can be specified as `readonly` or `ro`.
  - The `volume-opt` option, which can be specified more than once, takes a
    key-value pair consisting of the option name and its value.
@z

@x
> **Warning**
>
> If your volume driver accepts a comma-separated list as an option,
> you must escape the value from the outer CSV parser. To escape a `volume-opt`,
> surround it with double quotes (`"`) and surround the entire mount parameter
> with single quotes (`'`).
>
> For example, the `local` driver accepts mount options as a comma-separated
> list in the `o` parameter. This example shows the correct way to escape the list.
>
> ```console
> $ docker service create \
>  --mount 'type=volume,src=<VOLUME-NAME>,dst=<CONTAINER-PATH>,volume-driver=local,volume-opt=type=nfs,volume-opt=device=<nfs-server>:<nfs-path>,"volume-opt=o=addr=<nfs-address>,vers=4,soft,timeo=180,bg,tcp,rw"'
>  --name myservice \
>  <IMAGE>
> ```
{ .warning }
@y
> **Warning**
>
> If your volume driver accepts a comma-separated list as an option,
> you must escape the value from the outer CSV parser. To escape a `volume-opt`,
> surround it with double quotes (`"`) and surround the entire mount parameter
> with single quotes (`'`).
>
> For example, the `local` driver accepts mount options as a comma-separated
> list in the `o` parameter. This example shows the correct way to escape the list.
>
> ```console
> $ docker service create \
>  --mount 'type=volume,src=<VOLUME-NAME>,dst=<CONTAINER-PATH>,volume-driver=local,volume-opt=type=nfs,volume-opt=device=<nfs-server>:<nfs-path>,"volume-opt=o=addr=<nfs-address>,vers=4,soft,timeo=180,bg,tcp,rw"'
>  --name myservice \
>  <IMAGE>
> ```
{ .warning }
@z

@x
The examples below show both the `--mount` and `-v` syntax where possible, with
`--mount` first.
@y
The examples below show both the `--mount` and `-v` syntax where possible, with
`--mount` first.
@z

@x
### Differences between `-v` and `--mount` behavior 
@y
### Differences between `-v` and `--mount` behavior 
@z

@x
As opposed to bind mounts, all options for volumes are available for both
`--mount` and `-v` flags.
@y
As opposed to bind mounts, all options for volumes are available for both
`--mount` and `-v` flags.
@z

@x
Volumes used with services, only support `--mount`.
@y
Volumes used with services, only support `--mount`.
@z

@x
## Create and manage volumes
@y
## Create and manage volumes
@z

@x
Unlike a bind mount, you can create and manage volumes outside the scope of any
container.
@y
Unlike a bind mount, you can create and manage volumes outside the scope of any
container.
@z

@x
Create a volume:
@y
Create a volume:
@z

@x
```console
$ docker volume create my-vol
```
@y
```console
$ docker volume create my-vol
```
@z

@x
List volumes:
@y
List volumes:
@z

@x
```console
$ docker volume ls
@y
```console
$ docker volume ls
@z

@x
local               my-vol
```
@y
local               my-vol
```
@z

@x
Inspect a volume:
@y
Inspect a volume:
@z

@x
```console
$ docker volume inspect my-vol
[
    {
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/my-vol/_data",
        "Name": "my-vol",
        "Options": {},
        "Scope": "local"
    }
]
```
@y
```console
$ docker volume inspect my-vol
[
    {
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/my-vol/_data",
        "Name": "my-vol",
        "Options": {},
        "Scope": "local"
    }
]
```
@z

@x
Remove a volume:
@y
Remove a volume:
@z

@x
```console
$ docker volume rm my-vol
```
@y
```console
$ docker volume rm my-vol
```
@z

@x
## Start a container with a volume
@y
## Start a container with a volume
@z

@x
If you start a container with a volume that doesn't yet exist, Docker creates
the volume for you. The following example mounts the volume `myvol2` into
`/app/` in the container.
@y
If you start a container with a volume that doesn't yet exist, Docker creates
the volume for you. The following example mounts the volume `myvol2` into
`/app/` in the container.
@z

@x
The `-v` and `--mount` examples below produce the same result. You can't run
them both unless you remove the `devtest` container and the `myvol2` volume
after running the first one.
@y
The `-v` and `--mount` examples below produce the same result. You can't run
them both unless you remove the `devtest` container and the `myvol2` volume
after running the first one.
@z

@x
{{< tabs >}}
{{< tab name="`--mount`" >}}
@y
{{< tabs >}}
{{< tab name="`--mount`" >}}
@z

@x
```console
$ docker run -d \
  --name devtest \
  --mount source=myvol2,target=/app \
  nginx:latest
```
@y
```console
$ docker run -d \
  --name devtest \
  --mount source=myvol2,target=/app \
  nginx:latest
```
@z

@x
{{< /tab >}}
{{< tab name="`-v`" >}}
@y
{{< /tab >}}
{{< tab name="`-v`" >}}
@z

@x
```console
$ docker run -d \
  --name devtest \
  -v myvol2:/app \
  nginx:latest
```
@y
```console
$ docker run -d \
  --name devtest \
  -v myvol2:/app \
  nginx:latest
```
@z

@x
{{< /tab >}}
{{< /tabs >}}
@y
{{< /tab >}}
{{< /tabs >}}
@z

@x
Use `docker inspect devtest` to verify that Docker created the volume and it mounted
correctly. Look for the `Mounts` section:
@y
Use `docker inspect devtest` to verify that Docker created the volume and it mounted
correctly. Look for the `Mounts` section:
@z

@x
```json
"Mounts": [
    {
        "Type": "volume",
        "Name": "myvol2",
        "Source": "/var/lib/docker/volumes/myvol2/_data",
        "Destination": "/app",
        "Driver": "local",
        "Mode": "",
        "RW": true,
        "Propagation": ""
    }
],
```
@y
```json
"Mounts": [
    {
        "Type": "volume",
        "Name": "myvol2",
        "Source": "/var/lib/docker/volumes/myvol2/_data",
        "Destination": "/app",
        "Driver": "local",
        "Mode": "",
        "RW": true,
        "Propagation": ""
    }
],
```
@z

@x
This shows that the mount is a volume, it shows the correct source and
destination, and that the mount is read-write.
@y
This shows that the mount is a volume, it shows the correct source and
destination, and that the mount is read-write.
@z

@x
Stop the container and remove the volume. Note volume removal is a separate
step.
@y
Stop the container and remove the volume. Note volume removal is a separate
step.
@z

@x
```console
$ docker container stop devtest
@y
```console
$ docker container stop devtest
@z

@x
$ docker container rm devtest
@y
$ docker container rm devtest
@z

@x
$ docker volume rm myvol2
```
@y
$ docker volume rm myvol2
```
@z

@x
## Use a volume with Docker Compose
@y
## Use a volume with Docker Compose
@z

@x
The example below shows a single Docker Compose service with a volume:
@y
The example below shows a single Docker Compose service with a volume:
@z

@x
```yaml
services:
  frontend:
    image: node:lts
    volumes:
      - myapp:/home/node/app
volumes:
  myapp:
```
@y
```yaml
services:
  frontend:
    image: node:lts
    volumes:
      - myapp:/home/node/app
volumes:
  myapp:
```
@z

@x
Running `docker compose up` for the first time creates a volume. Docker reuses the same volume when you run the command subsequently.
@y
Running `docker compose up` for the first time creates a volume. Docker reuses the same volume when you run the command subsequently.
@z

@x
You can create a volume directly outside of Compose using `docker volume create` and
then reference it inside `compose.yaml` as follows:
@y
You can create a volume directly outside of Compose using `docker volume create` and
then reference it inside `compose.yaml` as follows:
@z

@x
```yaml
services:
  frontend:
    image: node:lts
    volumes:
      - myapp:/home/node/app
volumes:
  myapp:
    external: true
```
@y
```yaml
services:
  frontend:
    image: node:lts
    volumes:
      - myapp:/home/node/app
volumes:
  myapp:
    external: true
```
@z

@x
For more information about using volumes with Compose, refer to the
[Volumes](../compose/compose-file/07-volumes.md)
section in the Compose specification.
@y
For more information about using volumes with Compose, refer to the
[Volumes](../compose/compose-file/07-volumes.md)
section in the Compose specification.
@z

@x
### Start a service with volumes
@y
### Start a service with volumes
@z

@x
When you start a service and define a volume, each service container uses its own
local volume. None of the containers can share this data if you use the `local`
volume driver. However, some volume drivers do support shared storage.
@y
When you start a service and define a volume, each service container uses its own
local volume. None of the containers can share this data if you use the `local`
volume driver. However, some volume drivers do support shared storage.
@z

@x
The following example starts an `nginx` service with four replicas, each of which
uses a local volume called `myvol2`.
@y
The following example starts an `nginx` service with four replicas, each of which
uses a local volume called `myvol2`.
@z

@x
```console
$ docker service create -d \
  --replicas=4 \
  --name devtest-service \
  --mount source=myvol2,target=/app \
  nginx:latest
```
@y
```console
$ docker service create -d \
  --replicas=4 \
  --name devtest-service \
  --mount source=myvol2,target=/app \
  nginx:latest
```
@z

@x
Use `docker service ps devtest-service` to verify that the service is running:
@y
Use `docker service ps devtest-service` to verify that the service is running:
@z

@x
```console
$ docker service ps devtest-service
@y
```console
$ docker service ps devtest-service
@z

@x
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
4d7oz1j85wwn        devtest-service.1   nginx:latest        moby                Running             Running 14 seconds ago
```
@y
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
4d7oz1j85wwn        devtest-service.1   nginx:latest        moby                Running             Running 14 seconds ago
```
@z

@x
You can remove the service to stop the running tasks:
@y
You can remove the service to stop the running tasks:
@z

@x
```console
$ docker service rm devtest-service
```
@y
```console
$ docker service rm devtest-service
```
@z

@x
Removing the service doesn't remove any volumes created by the service.
Volume removal is a separate step.
@y
Removing the service doesn't remove any volumes created by the service.
Volume removal is a separate step.
@z

@x
#### Syntax differences for services
@y
#### Syntax differences for services
@z

@x
The `docker service create` command doesn't support the `-v` or `--volume` flag.
When mounting a volume into a service's containers, you must use the `--mount`
flag.
@y
The `docker service create` command doesn't support the `-v` or `--volume` flag.
When mounting a volume into a service's containers, you must use the `--mount`
flag.
@z

@x
### Populate a volume using a container
@y
### Populate a volume using a container
@z

@x
If you start a container which creates a new volume, and the container
has files or directories in the directory to be mounted such as `/app/`,
Docker copies the directory's contents into the volume. The container then
mounts and uses the volume, and other containers which use the volume also
have access to the pre-populated content.
@y
If you start a container which creates a new volume, and the container
has files or directories in the directory to be mounted such as `/app/`,
Docker copies the directory's contents into the volume. The container then
mounts and uses the volume, and other containers which use the volume also
have access to the pre-populated content.
@z

@x
To show this, the following example starts an `nginx` container and
populates the new volume `nginx-vol` with the contents of the container's
`/usr/share/nginx/html` directory. This is where Nginx stores its default HTML
content.
@y
To show this, the following example starts an `nginx` container and
populates the new volume `nginx-vol` with the contents of the container's
`/usr/share/nginx/html` directory. This is where Nginx stores its default HTML
content.
@z

@x
The `--mount` and `-v` examples have the same end result.
@y
The `--mount` and `-v` examples have the same end result.
@z

@x
{{< tabs >}}
{{< tab name="`--mount`" >}}
@y
{{< tabs >}}
{{< tab name="`--mount`" >}}
@z

@x
```console
$ docker run -d \
  --name=nginxtest \
  --mount source=nginx-vol,destination=/usr/share/nginx/html \
  nginx:latest
```
@y
```console
$ docker run -d \
  --name=nginxtest \
  --mount source=nginx-vol,destination=/usr/share/nginx/html \
  nginx:latest
```
@z

@x
{{< /tab >}}
{{< tab name="`-v`" >}}
@y
{{< /tab >}}
{{< tab name="`-v`" >}}
@z

@x
```console
$ docker run -d \
  --name=nginxtest \
  -v nginx-vol:/usr/share/nginx/html \
  nginx:latest
```
@y
```console
$ docker run -d \
  --name=nginxtest \
  -v nginx-vol:/usr/share/nginx/html \
  nginx:latest
```
@z

@x
{{< /tab >}}
{{< /tabs >}}
@y
{{< /tab >}}
{{< /tabs >}}
@z

@x
After running either of these examples, run the following commands to clean up
the containers and volumes. Note volume removal is a separate step.
@y
After running either of these examples, run the following commands to clean up
the containers and volumes. Note volume removal is a separate step.
@z

@x
```console
$ docker container stop nginxtest
@y
```console
$ docker container stop nginxtest
@z

@x
$ docker container rm nginxtest
@y
$ docker container rm nginxtest
@z

@x
$ docker volume rm nginx-vol
```
@y
$ docker volume rm nginx-vol
```
@z

@x
## Use a read-only volume
@y
## Use a read-only volume
@z

@x
For some development applications, the container needs to write into the bind
mount so that changes are propagated back to the Docker host. At other times,
the container only needs read access to the data. Multiple
containers can mount the same volume. You can simultaneously mount a
single volume as `read-write` for some containers and as `read-only` for others.
@y
For some development applications, the container needs to write into the bind
mount so that changes are propagated back to the Docker host. At other times,
the container only needs read access to the data. Multiple
containers can mount the same volume. You can simultaneously mount a
single volume as `read-write` for some containers and as `read-only` for others.
@z

@x
The following example changes the one above. It mounts the directory as a read-only
volume, by adding `ro` to the (empty by default) list of options, after the
mount point within the container. Where multiple options are present, you can separate
them using commas.
@y
The following example changes the one above. It mounts the directory as a read-only
volume, by adding `ro` to the (empty by default) list of options, after the
mount point within the container. Where multiple options are present, you can separate
them using commas.
@z

@x
The `--mount` and `-v` examples have the same result.
@y
The `--mount` and `-v` examples have the same result.
@z

@x
{{< tabs >}}
{{< tab name="`--mount`" >}}
@y
{{< tabs >}}
{{< tab name="`--mount`" >}}
@z

@x
```console
$ docker run -d \
  --name=nginxtest \
  --mount source=nginx-vol,destination=/usr/share/nginx/html,readonly \
  nginx:latest
```
@y
```console
$ docker run -d \
  --name=nginxtest \
  --mount source=nginx-vol,destination=/usr/share/nginx/html,readonly \
  nginx:latest
```
@z

@x
{{< /tab >}}
{{< tab name="`-v`" >}}
@y
{{< /tab >}}
{{< tab name="`-v`" >}}
@z

@x
```console
$ docker run -d \
  --name=nginxtest \
  -v nginx-vol:/usr/share/nginx/html:ro \
  nginx:latest
```
@y
```console
$ docker run -d \
  --name=nginxtest \
  -v nginx-vol:/usr/share/nginx/html:ro \
  nginx:latest
```
@z

@x
{{< /tab >}}
{{< /tabs >}}
@y
{{< /tab >}}
{{< /tabs >}}
@z

@x
Use `docker inspect nginxtest` to verify that Docker created the read-only mount
correctly. Look for the `Mounts` section:
@y
Use `docker inspect nginxtest` to verify that Docker created the read-only mount
correctly. Look for the `Mounts` section:
@z

@x
```json
"Mounts": [
    {
        "Type": "volume",
        "Name": "nginx-vol",
        "Source": "/var/lib/docker/volumes/nginx-vol/_data",
        "Destination": "/usr/share/nginx/html",
        "Driver": "local",
        "Mode": "",
        "RW": false,
        "Propagation": ""
    }
],
```
@y
```json
"Mounts": [
    {
        "Type": "volume",
        "Name": "nginx-vol",
        "Source": "/var/lib/docker/volumes/nginx-vol/_data",
        "Destination": "/usr/share/nginx/html",
        "Driver": "local",
        "Mode": "",
        "RW": false,
        "Propagation": ""
    }
],
```
@z

@x
Stop and remove the container, and remove the volume. Volume removal is a
separate step.
@y
Stop and remove the container, and remove the volume. Volume removal is a
separate step.
@z

@x
```console
$ docker container stop nginxtest
@y
```console
$ docker container stop nginxtest
@z

@x
$ docker container rm nginxtest
@y
$ docker container rm nginxtest
@z

@x
$ docker volume rm nginx-vol
```
@y
$ docker volume rm nginx-vol
```
@z

@x
## Share data between machines
@y
## Share data between machines
@z

@x
When building fault-tolerant applications, you may need to configure multiple
replicas of the same service to have access to the same files.
@y
When building fault-tolerant applications, you may need to configure multiple
replicas of the same service to have access to the same files.
@z

@x
![shared storage](images/volumes-shared-storage.webp)
@y
![shared storage](images/volumes-shared-storage.webp)
@z

@x
There are several ways to achieve this when developing your applications.
One is to add logic to your application to store files on a cloud object
storage system like Amazon S3. Another is to create volumes with a driver that
supports writing files to an external storage system like NFS or Amazon S3.
@y
There are several ways to achieve this when developing your applications.
One is to add logic to your application to store files on a cloud object
storage system like Amazon S3. Another is to create volumes with a driver that
supports writing files to an external storage system like NFS or Amazon S3.
@z

@x
Volume drivers allow you to abstract the underlying storage system from the
application logic. For example, if your services use a volume with an NFS
driver, you can update the services to use a different driver. For example, to
store data in the cloud, without changing the application logic.
@y
Volume drivers allow you to abstract the underlying storage system from the
application logic. For example, if your services use a volume with an NFS
driver, you can update the services to use a different driver. For example, to
store data in the cloud, without changing the application logic.
@z

@x
## Use a volume driver
@y
## Use a volume driver
@z

@x
When you create a volume using `docker volume create`, or when you start a
container which uses a not-yet-created volume, you can specify a volume driver.
The following examples use the `vieux/sshfs` volume driver, first when creating
a standalone volume, and then when starting a container which creates a new
volume.
@y
When you create a volume using `docker volume create`, or when you start a
container which uses a not-yet-created volume, you can specify a volume driver.
The following examples use the `vieux/sshfs` volume driver, first when creating
a standalone volume, and then when starting a container which creates a new
volume.
@z

@x
### Initial setup
@y
### Initial setup
@z

@x
The following example assumes that you have two nodes, the first of which is a Docker
host and can connect to the second node using SSH.
@y
The following example assumes that you have two nodes, the first of which is a Docker
host and can connect to the second node using SSH.
@z

@x
On the Docker host, install the `vieux/sshfs` plugin:
@y
On the Docker host, install the `vieux/sshfs` plugin:
@z

@x
```console
$ docker plugin install --grant-all-permissions vieux/sshfs
```
@y
```console
$ docker plugin install --grant-all-permissions vieux/sshfs
```
@z

@x
### Create a volume using a volume driver
@y
### Create a volume using a volume driver
@z

@x
This example specifies an SSH password, but if the two hosts have shared keys
configured, you can exclude the password. Each volume driver may have zero or more
configurable options, you specify each of them using an `-o` flag.
@y
This example specifies an SSH password, but if the two hosts have shared keys
configured, you can exclude the password. Each volume driver may have zero or more
configurable options, you specify each of them using an `-o` flag.
@z

@x
```console
$ docker volume create --driver vieux/sshfs \
  -o sshcmd=test@node2:/home/test \
  -o password=testpassword \
  sshvolume
```
@y
```console
$ docker volume create --driver vieux/sshfs \
  -o sshcmd=test@node2:/home/test \
  -o password=testpassword \
  sshvolume
```
@z

@x
### Start a container which creates a volume using a volume driver
@y
### Start a container which creates a volume using a volume driver
@z

@x
The following example specifies an SSH password. However, if the two hosts have
shared keys configured, you can exclude the password.
Each volume driver may have zero or more configurable options.
@y
The following example specifies an SSH password. However, if the two hosts have
shared keys configured, you can exclude the password.
Each volume driver may have zero or more configurable options.
@z

@x
> **Note**
>
> If the volume driver requires you to pass any options,
> you must use the `--mount` flag to mount the volume, and not `-v`.
@y
> **Note**
>
> If the volume driver requires you to pass any options,
> you must use the `--mount` flag to mount the volume, and not `-v`.
@z

@x
```console
$ docker run -d \
  --name sshfs-container \
  --volume-driver vieux/sshfs \
  --mount src=sshvolume,target=/app,volume-opt=sshcmd=test@node2:/home/test,volume-opt=password=testpassword \
  nginx:latest
```
@y
```console
$ docker run -d \
  --name sshfs-container \
  --volume-driver vieux/sshfs \
  --mount src=sshvolume,target=/app,volume-opt=sshcmd=test@node2:/home/test,volume-opt=password=testpassword \
  nginx:latest
```
@z

@x
### Create a service which creates an NFS volume
@y
### Create a service which creates an NFS volume
@z

@x
The following example shows how you can create an NFS volume when creating a service.
It uses `10.0.0.10` as the NFS server and `/var/docker-nfs` as the exported directory on the NFS server.
Note that the volume driver specified is `local`.
@y
The following example shows how you can create an NFS volume when creating a service.
It uses `10.0.0.10` as the NFS server and `/var/docker-nfs` as the exported directory on the NFS server.
Note that the volume driver specified is `local`.
@z

@x
#### NFSv3
@y
#### NFSv3
@z

@x
```console
$ docker service create -d \
  --name nfs-service \
  --mount 'type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,volume-opt=o=addr=10.0.0.10' \
  nginx:latest
```
@y
```console
$ docker service create -d \
  --name nfs-service \
  --mount 'type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,volume-opt=o=addr=10.0.0.10' \
  nginx:latest
```
@z

@x
#### NFSv4
@y
#### NFSv4
@z

@x
```console
$ docker service create -d \
    --name nfs-service \
    --mount 'type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,"volume-opt=o=addr=10.0.0.10,rw,nfsvers=4,async"' \
    nginx:latest
```
@y
```console
$ docker service create -d \
    --name nfs-service \
    --mount 'type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,"volume-opt=o=addr=10.0.0.10,rw,nfsvers=4,async"' \
    nginx:latest
```
@z

@x
### Create CIFS/Samba volumes
@y
### Create CIFS/Samba volumes
@z

@x
You can mount a Samba share directly in Docker without configuring a mount point on your host.
@y
You can mount a Samba share directly in Docker without configuring a mount point on your host.
@z

@x
```console
$ docker volume create \
	--driver local \
	--opt type=cifs \
	--opt device=//uxxxxx.your-server.de/backup \
	--opt o=addr=uxxxxx.your-server.de,username=uxxxxxxx,password=*****,file_mode=0777,dir_mode=0777 \
	--name cif-volume
```
@y
```console
$ docker volume create \
	--driver local \
	--opt type=cifs \
	--opt device=//uxxxxx.your-server.de/backup \
	--opt o=addr=uxxxxx.your-server.de,username=uxxxxxxx,password=*****,file_mode=0777,dir_mode=0777 \
	--name cif-volume
```
@z

@x
The `addr` option is required if you specify a hostname instead of an IP.
This lets Docker perform the hostname lookup.
@y
The `addr` option is required if you specify a hostname instead of an IP.
This lets Docker perform the hostname lookup.
@z

@x
### Block storage devices
@y
### Block storage devices
@z

@x
You can mount a block storage device, such as an external drive or a drive partition, to a container.
The following example shows how to create and use a file as a block storage device,
and how to mount the block device as a container volume.
@y
You can mount a block storage device, such as an external drive or a drive partition, to a container.
The following example shows how to create and use a file as a block storage device,
and how to mount the block device as a container volume.
@z

@x
> **Important**
>
> The following procedure is only an example.
> The solution illustrated here isn't recommended as a general practice.
> Don't attempt this approach unless you're confident about what you're doing.
{ .important }
@y
> **Important**
>
> The following procedure is only an example.
> The solution illustrated here isn't recommended as a general practice.
> Don't attempt this approach unless you're confident about what you're doing.
{ .important }
@z

@x
#### How mounting block devices works
@y
#### How mounting block devices works
@z

@x
Under the hood, the `--mount` flag using the `local` storage driver invokes the
Linux `mount` syscall and forwards the options you pass to it unaltered.
Docker doesn't implement any additional functionality on top of the native mount features supported by the Linux kernel.
@y
Under the hood, the `--mount` flag using the `local` storage driver invokes the
Linux `mount` syscall and forwards the options you pass to it unaltered.
Docker doesn't implement any additional functionality on top of the native mount features supported by the Linux kernel.
@z

@x
If you're familiar with the
[Linux `mount` command](https://man7.org/linux/man-pages/man8/mount.8.html),
you can think of the `--mount` options as forwarded to the `mount` command in the following manner:
@y
If you're familiar with the
[Linux `mount` command](https://man7.org/linux/man-pages/man8/mount.8.html),
you can think of the `--mount` options as forwarded to the `mount` command in the following manner:
@z

@x
```console
$ mount -t <mount.volume-opt.type> <mount.volume-opt.device> <mount.dst> -o <mount.volume-opts.o>
```
@y
```console
$ mount -t <mount.volume-opt.type> <mount.volume-opt.device> <mount.dst> -o <mount.volume-opts.o>
```
@z

@x
To explain this further, consider the following `mount` command example.
This command mounts the `/dev/loop5` device to the path `/external-drive` on the system. 
@y
To explain this further, consider the following `mount` command example.
This command mounts the `/dev/loop5` device to the path `/external-drive` on the system. 
@z

@x
```console
$ mount -t ext4 /dev/loop5 /external-drive
```
@y
```console
$ mount -t ext4 /dev/loop5 /external-drive
```
@z

@x
The following `docker run` command achieves a similar result, from the point of view of the container being run.
Running a container with this `--mount` option sets up the mount in the same way as if you had executed the
`mount` command from the previous example.
@y
The following `docker run` command achieves a similar result, from the point of view of the container being run.
Running a container with this `--mount` option sets up the mount in the same way as if you had executed the
`mount` command from the previous example.
@z

@x
```console
$ docker run \
  --mount='type=volume,dst=/external-drive,volume-driver=local,volume-opt=device=/dev/loop5,volume-opt=type=ext4'
```
@y
```console
$ docker run \
  --mount='type=volume,dst=/external-drive,volume-driver=local,volume-opt=device=/dev/loop5,volume-opt=type=ext4'
```
@z

@x
You can't run the `mount` command inside the container directly,
because the container is unable to access the `/dev/loop5` device.
That's why the `docker run` command uses the `--mount` option.
@y
You can't run the `mount` command inside the container directly,
because the container is unable to access the `/dev/loop5` device.
That's why the `docker run` command uses the `--mount` option.
@z

@x
#### Example: Mounting a block device in a container
@y
#### Example: Mounting a block device in a container
@z

@x
The following steps create an `ext4` filesystem and mounts it into a container.
The filesystem support of your system depends on the version of the Linux kernel you are using.
@y
The following steps create an `ext4` filesystem and mounts it into a container.
The filesystem support of your system depends on the version of the Linux kernel you are using.
@z

@x
1. Create a file and allocate some space to it:
@y
1. Create a file and allocate some space to it:
@z

@x
   ```console
   $ fallocate -l 1G disk.raw
   ```
@y
   ```console
   $ fallocate -l 1G disk.raw
   ```
@z

@x
2. Build a filesystem onto the `disk.raw` file:
@y
2. Build a filesystem onto the `disk.raw` file:
@z

@x
   ```console
   $ mkfs.ext4 disk.raw
   ```
@y
   ```console
   $ mkfs.ext4 disk.raw
   ```
@z

@x
3. Create a loop device:
@y
3. Create a loop device:
@z

@x
   ```console
   $ losetup -f --show disk.raw
   /dev/loop5
   ```
@y
   ```console
   $ losetup -f --show disk.raw
   /dev/loop5
   ```
@z

@x
   > **Note**
   >
   > `losetup` creates an ephemeral loop device that's removed after
   > system reboot, or manually removed with `losetup -d`.
@y
   > **Note**
   >
   > `losetup` creates an ephemeral loop device that's removed after
   > system reboot, or manually removed with `losetup -d`.
@z

@x
4. Run a container that mounts the loop device as a volume:
@y
4. Run a container that mounts the loop device as a volume:
@z

@x
   ```console
   $ docker run -it --rm \
     --mount='type=volume,dst=/external-drive,volume-driver=local,volume-opt=device=/dev/loop5,volume-opt=type=ext4' \
     ubuntu bash
   ```
@y
   ```console
   $ docker run -it --rm \
     --mount='type=volume,dst=/external-drive,volume-driver=local,volume-opt=device=/dev/loop5,volume-opt=type=ext4' \
     ubuntu bash
   ```
@z

@x
   When the container starts, the path `/external-drive` mounts the
   `disk.raw` file from the host filesystem as a block device.
@y
   When the container starts, the path `/external-drive` mounts the
   `disk.raw` file from the host filesystem as a block device.
@z

@x
5. When you're done, and the device is unmounted from the container,
   detach the loop device to remove the device from the host system:
@y
5. When you're done, and the device is unmounted from the container,
   detach the loop device to remove the device from the host system:
@z

@x
   ```console
   $ losetup -d /dev/loop5
   ```
@y
   ```console
   $ losetup -d /dev/loop5
   ```
@z

@x
## Back up, restore, or migrate data volumes
@y
## Back up, restore, or migrate data volumes
@z

@x
Volumes are useful for backups, restores, and migrations.
Use the `--volumes-from` flag to create a new container that mounts that volume.
@y
Volumes are useful for backups, restores, and migrations.
Use the `--volumes-from` flag to create a new container that mounts that volume.
@z

@x
### Back up a volume
@y
### Back up a volume
@z

@x
For example, create a new container named `dbstore`:
@y
For example, create a new container named `dbstore`:
@z

@x
```console
$ docker run -v /dbdata --name dbstore ubuntu /bin/bash
```
@y
```console
$ docker run -v /dbdata --name dbstore ubuntu /bin/bash
```
@z

@x
In the next command:
@y
In the next command:
@z

@x
- Launch a new container and mount the volume from the `dbstore` container
- Mount a local host directory as `/backup`
- Pass a command that tars the contents of the `dbdata` volume to a `backup.tar` file inside our `/backup` directory.
@y
- Launch a new container and mount the volume from the `dbstore` container
- Mount a local host directory as `/backup`
- Pass a command that tars the contents of the `dbdata` volume to a `backup.tar` file inside our `/backup` directory.
@z

@x
```console
$ docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata
```
@y
```console
$ docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata
```
@z

@x
When the command completes and the container stops, it creates a backup of
the `dbdata` volume.
@y
When the command completes and the container stops, it creates a backup of
the `dbdata` volume.
@z

@x
### Restore volume from a backup
@y
### Restore volume from a backup
@z

@x
With the backup just created, you can restore it to the same container,
or to another container that you created elsewhere.
@y
With the backup just created, you can restore it to the same container,
or to another container that you created elsewhere.
@z

@x
For example, create a new container named `dbstore2`:
@y
For example, create a new container named `dbstore2`:
@z

@x
```console
$ docker run -v /dbdata --name dbstore2 ubuntu /bin/bash
```
@y
```console
$ docker run -v /dbdata --name dbstore2 ubuntu /bin/bash
```
@z

@x
Then, un-tar the backup file in the new container’s data volume:
@y
Then, un-tar the backup file in the new container’s data volume:
@z

@x
```console
$ docker run --rm --volumes-from dbstore2 -v $(pwd):/backup ubuntu bash -c "cd /dbdata && tar xvf /backup/backup.tar --strip 1"
```
@y
```console
$ docker run --rm --volumes-from dbstore2 -v $(pwd):/backup ubuntu bash -c "cd /dbdata && tar xvf /backup/backup.tar --strip 1"
```
@z

@x
You can use the techniques above to automate backup, migration, and restore
testing using your preferred tools.
@y
You can use the techniques above to automate backup, migration, and restore
testing using your preferred tools.
@z

@x
## Remove volumes
@y
## Remove volumes
@z

@x
A Docker data volume persists after you delete a container. There are two types
of volumes to consider:
@y
A Docker data volume persists after you delete a container. There are two types
of volumes to consider:
@z

@x
- Named volumes have a specific source from outside the container, for example, `awesome:/bar`.
- Anonymous volumes have no specific source. Therefore, when the container is deleted, you can instruct the Docker Engine daemon to remove them.
@y
- Named volumes have a specific source from outside the container, for example, `awesome:/bar`.
- Anonymous volumes have no specific source. Therefore, when the container is deleted, you can instruct the Docker Engine daemon to remove them.
@z

@x
### Remove anonymous volumes
@y
### Remove anonymous volumes
@z

@x
To automatically remove anonymous volumes, use the `--rm` option. For example,
this command creates an anonymous `/foo` volume. When you remove the container,
the Docker Engine removes the `/foo` volume but not the `awesome` volume.
@y
To automatically remove anonymous volumes, use the `--rm` option. For example,
this command creates an anonymous `/foo` volume. When you remove the container,
the Docker Engine removes the `/foo` volume but not the `awesome` volume.
@z

@x
```console
$ docker run --rm -v /foo -v awesome:/bar busybox top
```
@y
```console
$ docker run --rm -v /foo -v awesome:/bar busybox top
```
@z

@x
> **Note**
>
> If another container binds the volumes with
> `--volumes-from`, the volume definitions are _copied_ and the
> anonymous volume also stays after the first container is removed.
@y
> **Note**
>
> If another container binds the volumes with
> `--volumes-from`, the volume definitions are _copied_ and the
> anonymous volume also stays after the first container is removed.
@z

@x
### Remove all volumes
@y
### Remove all volumes
@z

@x
To remove all unused volumes and free up space:
@y
To remove all unused volumes and free up space:
@z

@x
```console
$ docker volume prune
```
@y
```console
$ docker volume prune
```
@z

@x
## Next steps
@y
## Next steps
@z

@x
- Learn about [bind mounts](bind-mounts.md).
- Learn about [tmpfs mounts](tmpfs.md).
- Learn about [storage drivers](/storage/storagedriver/).
- Learn about [third-party volume driver plugins](/engine/extend/legacy_plugins/).
@y
- Learn about [bind mounts](bind-mounts.md).
- Learn about [tmpfs mounts](tmpfs.md).
- Learn about [storage drivers](/storage/storagedriver/).
- Learn about [third-party volume driver plugins](/engine/extend/legacy_plugins/).
@z
